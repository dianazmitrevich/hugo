import React, { useEffect, useRef } from "react";
import "../assets/css/about-screen.css";

type AboutScreenProps = {
    lineColor: string;
};

const aboutItems = [
    {
        emoji: "‚úàÔ∏è",
        text: "–ó–∞ 21 –≥–æ–¥ —è –±—ã–ª–∞ –≤ 15 —Å—Ç—Ä–∞–Ω–∞—Ö",
        color: "#BDDBE8",
    },
    {
        emoji: "üèÇ",
        text: "–Ø –∫–∞—Ç–∞—é—Å—å –Ω–∞ —Å–Ω–æ—É–±–æ—Ä–¥–µ –∏ –≤—ã–µ–∑–∂–∞—é –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å",
        color: "#F2CBAC",
    },
    {
        emoji: "üê∂",
        text: "–£ –º–µ–Ω—è –µ—Å—Ç—å 2 —Å–æ–±–∞–∫–∏ - 2 —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª—å–¥–æ–≥–∞",
        color: "#F7C6CE",
    },
    {
        emoji: "üë©‚Äçüíª",
        text: "–£ –º–µ–Ω—è –±—ã–ª–æ 120–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–µ",
        color: "#E2E2E2",
    },
    {
        emoji: "üçÄ",
        text: "–Ø –Ω–∞—Ö–æ–¥–∏–ª–∞ 4-–ª–∏—Å—Ç–Ω—ã–π –∫–ª–µ–≤–µ—Ä 3 —Ä–∞–∑–∞",
        color: "#C1F5A5",
    },
    {
        emoji: "‚Äçüçû",
        text: "–£–º–µ—é –≥–æ—Ç–æ–≤–∏—Ç—å —è–ø–æ–Ω—Å–∫–∏–π —Ö–ª–µ–±",
        color: "#F3E4BD",
    },
    {
        emoji: "üçùÔ∏è",
        text: "–õ—é–±–ª—é –≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞–∑–Ω—É—é –µ–¥—É",
        color: "#F0AA9F",
    },
    {
        emoji: "üéæÔ∏è",
        text: "–£–≤–ª–µ–∫–∞—é—Å—å —Ç–µ–Ω–Ω–∏—Å–æ–º",
        color: "#EAF2A0",
    },
    {
        emoji: "üöòÔ∏è",
        text: "–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
        color: "#C2EFF2",
    },
    {
        emoji: "üõü",
        text: "–Ø –ø–ª–∞–≤–∞–ª–∞ –ø–æ —Ä–µ–∫–µ –ù–∏–ª",
        color: "#ECCAB1",
    },
    {
        emoji: "üììÔ∏è",
        text: "–° 12 –ª–µ—Ç –≤–ª–∞–¥–µ—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ",
        color: "#DBDBDB",
    },
];

const AboutScreen: React.FC<AboutScreenProps> = ({ lineColor }) => {
    const wrapperRef = useRef<HTMLDivElement | null>(null);
    const barRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const updateCompletedBar = () => {
            if (wrapperRef.current && barRef.current) {
                const wrapperHeight = wrapperRef.current.clientHeight;
                const wrapperScrollHeight = wrapperRef.current.scrollHeight;
                const scrollTop = wrapperRef.current.scrollTop;
                const scrollPercent = (scrollTop / (wrapperScrollHeight - wrapperHeight)) * 100;

                barRef.current.style.width = `${scrollPercent}%`;

                const barParent = barRef.current.parentElement;
                if (barParent) {
                    if (wrapperScrollHeight > wrapperHeight) {
                        barParent.classList.remove("d-none");
                    } else {
                        barParent.classList.add("d-none");
                    }
                }
            }
        };

        const currentWrapperRef = wrapperRef.current;
        currentWrapperRef?.addEventListener("scroll", updateCompletedBar);

        updateCompletedBar();

        return () => {
            currentWrapperRef?.removeEventListener("scroll", updateCompletedBar);
        };
    }, []);

    return (
        <div className="screen-content about">
            <div className="projects__bar progress-bar">
                <div className="copmpleted" style={{ background: lineColor }} ref={barRef}></div>
            </div>
            <div className="about__wrapper container" ref={wrapperRef}>
                <div className="about__title screen-title">–ë—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã!</div>
                <div className="about__items">
                    {aboutItems.map((item, index) => (
                        <div key={index} className="item" style={{ backgroundColor: item.color }}>
                            <div className="item__wrap">
                                <div className="item__emoji">{item.emoji}</div>
                                <div className="item__text">{item.text}</div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default AboutScreen;
